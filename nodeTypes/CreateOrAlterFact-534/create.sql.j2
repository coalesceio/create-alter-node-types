{#
    Copyright (c) 2025 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Name           : Create or Alter Fact table == #}
{# == Node Type Description    : This node loads data into the fact table created and inserts data into the same == #}

{# =========================================================
Initialize metadata tracking variables
========================================================= #}
{% set nsMetaVariables = namespace(
    joinTest            = true,
    transformTest       = true,
    sourceLinkTest      = true,
    businessKeyTest     = true,
    insertStrategyTest  = true,
    truncateBeforeTest  = true,
    testsEnabledTest    = true,
    distinctTest        = true,
    groupByAllTest      = true,
    orderByTest         = true,
    metaDataChanged     = false,
    joinDiff            = [],
    transformDiff       = [],
    sourceLinkDiff      = [],
    businessDiff        = [],
    insertStrategyDiff  = [],
    truncateBeforeDiff  = [],
    testsEnabledDiff    = [],
    distinctDiff        = [],
    groupByAllDiff      = [],
    orderByDiff         = [],
    metaDataChanges     = [],
    metadataUpdate      = 'Metadata Update'
) %}

{% if desiredState == undefined %}

    {# Table Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
    
       {{ stage('Drop ' + currentState.node.materializationType) }}
       DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

{% elif currentState == undefined or (currentState != undefined and desiredState != currentState) %}
    
       {%if currentState != undefined%} 

            {# =========================================================
            Compare source counts
            ========================================================= #}
            {% set sourcesTest = currentState.sources | count == desiredState.sources | count %}

            {% if sourcesTest %}
                {% for src in desiredState.sources %}
                    {% set matchingSource = currentState.sources | selectattr('name', 'equalto', src.name) | first %}
                    {% if matchingSource %}
 
                        {# =========================================================
                        Join comparison
                        ========================================================= #}
                        {% set desiredStateSources = src.join | replace("{{", '"{{"') | replace("}}", '"}}"') %}
                        {% set currentStateSources = matchingSource.join | replace("{{", '"{{"') | replace("}}", '"}}"') %}

                        {# Same number of sources — compare join transformations #}
                        {% if desiredStateSources != currentStateSources %}
                            {% set nsMetaVariables.joinTest = false %}
                            {% set _ = nsMetaVariables.joinDiff.append({
                                "Source": src.name,
                                "is": desiredStateSources,
                                "was": currentStateSources }) %}
                        {% endif %}

                        {# =========================================================
                        Transformation and column source changes comparison (per column)
                        ========================================================= #}
                        {% for col in src.columns %}

                            {# Try to get matching column #}
                            {% set matched_column = matchingSource.columns
                                | selectattr('id', 'equalto', col.id)
                                | first
                            %}

                            {% if matched_column %}

                                {# Transformation Changes #}
                                {% set currentTransform = matchingSource.columns
                                    | selectattr('id', 'equalto', col.id)
                                    | map(attribute='transform')
                                    | first
                                    | default('')
                                %}

                                {% if currentTransform != col.transform %}
                                    {% set nsMetaVariables.transformTest = false %}
                                    {% set _ = nsMetaVariables.transformDiff.append({
                                        "Source Name": src.name,
                                        "Column Name": col.name,
                                        "is": col.transform,
                                        "was": currentTransform
                                    }) %}
                                {% endif %}

                                {# Column Source Changes #}
                                {% set currentSource = matchingSource.columns
                                    | selectattr('id', 'equalto', col.id)
                                    | map(attribute='sourceColumns')
                                    | first
                                    | default('')
                                %}

                                {% if currentSource != col.sourceColumns %}
                                    {% set nsMetaVariables.sourceLinkTest = false %}
                                    {% set _ = nsMetaVariables.sourceLinkDiff.append({
                                        "Source Name": src.name,
                                        "Column Name": col.name,
                                        "is": (col.sourceColumns | selectattr('node','defined') | map(attribute='node.name') | first) | default('') ~ "-" ~ (col.sourceColumns | selectattr('column','defined') | map(attribute='column.name') | first) | default(''),
                                        "was": (currentSource | selectattr('node','defined') | map(attribute='node.name') | first) | default('') ~ "-" ~ (currentSource | selectattr('column','defined') | map(attribute='column.name') | first) | default('')
                                    }) %}
                                {% endif %}
                            {% endif %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}

                {% if nsMetaVariables.transformTest == false %}
                    {{ update_metadata("Transform", nsMetaVariables.transformDiff, "Transform") }}
                {% endif %}

                {% if nsMetaVariables.sourceLinkTest == false %}
                    {{ update_metadata("Source Link", nsMetaVariables.sourceLinkDiff, "Source Link") }}
                {% endif %}
            {% else %}
                {# Source count mismatch — compare source names instead #}
                {% set desiredStateSources = desiredState.sources | map(attribute='name') | list | sort %}
                {% set currentStateSources = currentState.sources | map(attribute='name') | list | sort %}

                {% if desiredStateSources != currentStateSources %}
                    {% set nsMetaVariables.joinTest = false %}
                    {% set _ = nsMetaVariables.joinDiff.append({"is": desiredStateSources, "was": currentStateSources }) %}
                {% endif %}
            {% endif %}

            {% if nsMetaVariables.joinTest == false %}
                    {{ update_metadata("Join", nsMetaVariables.joinDiff, "Join") }}
            {% endif %}

            {# =========================================================
            Business key comparison
            ========================================================= #}
            {% set currentBusinessKeys = currentState.columns
                | selectattr('isBusinessKey', 'equalto', true)
                | map(attribute='name')
                | list
                | sort
            %}

            {% set desiredBusinessKeys = desiredState.columns
                | selectattr('isBusinessKey', 'equalto', true)
                | map(attribute='name')
                | list
                | sort
            %}

            {% if currentBusinessKeys != desiredBusinessKeys %}
                {% set nsMetaVariables.businessKeyTest = false %}
                {% set _ = nsMetaVariables.businessDiff.append({
                    "is": desiredBusinessKeys,
                    "was": currentBusinessKeys
                }) %}

                {{ update_metadata("Business Keys", nsMetaVariables.businessDiff, "Business Keys") }}

            {% endif %}

            {# =========================================================
            Insert Strategy comparison
            ========================================================= #}
            {% if currentState.config.insertStrategy != desiredState.config.insertStrategy %}
                {% set nsMetaVariables.insertStrategyTest = false %}
                {% set _ = nsMetaVariables.insertStrategyDiff.append({
                    "is": desiredState.config.insertStrategy,
                    "was": currentState.config.insertStrategy
                }) %}

                {{ update_metadata("Insert Strategy", nsMetaVariables.insertStrategyDiff, "Insert Strategy") }}

            {% endif %}

            {# =========================================================
            Truncate Table comparison
            ========================================================= #}
            {% if currentState.config.truncateBefore != desiredState.config.truncateBefore %}
                {% set nsMetaVariables.truncateBeforeTest = false %}
                {% set _ = nsMetaVariables.truncateBeforeDiff.append({
                    "is": desiredState.config.truncateBefore,
                    "was": currentState.config.truncateBefore
                }) %}

                {{ update_metadata("Truncate Before", nsMetaVariables.truncateBeforeDiff, "Truncate Before") }}

            {% endif %}

            {# =========================================================
            Test Enabled comparison (per column)
            ========================================================= #}
            {% if desiredState.config.testsEnabled != currentState.config.testsEnabled %}

                    {% set nsMetaVariables.testsEnabledTest = false %}
                    {% set _ = nsMetaVariables.testsEnabledDiff.append({
                        "is": desiredState.config.testsEnabled,
                        "was": currentState.config.testsEnabled
                    }) %}

            {% elif desiredState.config.testsEnabled and currentState.config.testsEnabled %}

                {# Changes in Node Tests #}
                {% if currentState.node.tests | length != desiredState.node.tests | length %}

                    {% set nsMetaVariables.testsEnabledTest = false %}
                    {% set _ = nsMetaVariables.testsEnabledDiff.append({
                        "is": desiredState.node.tests | map(attribute="name") | list | sort ,
                        "was": currentState.node.tests | map(attribute="name") | list | sort
                    }) %}
                {% else %}
                    {% for dtest in desiredState.node.tests %}
                        {% set ctest = (currentState.node.tests | selectattr("name", "equalto", dtest.name) | first) %}

                        {% if ctest != dtest %}
                            {% set nsMetaVariables.testsEnabledTest = false %}
                            {% set _ = nsMetaVariables.testsEnabledDiff.append({
                                "is": dtest,
                                "was": ctest
                            }) %}
                        {% endif %}
                    {% endfor %}
                {% endif %}

                {# Changes in Column tests #}
                {% for src in desiredState.sources %}

                    {% set matchingSource = currentState.sources | selectattr('name', 'equalto', src.name) | first %}

                    {% if matchingSource %}
                        {% for col in src.columns %}
                            {% set currentTest = matchingSource.columns
                                | selectattr('id', 'equalto', col.id)
                                | map(attribute='tests')
                                | first
                                | default('')
                            %}

                            {% if currentTest != col.tests %}
                                {% set nsMetaVariables.testsEnabledTest = false %}
                                {% set cTests = currentTest | map(attribute="name") | list | sort %}
                                {% set dTests = col.tests | map(attribute="name") | list | sort %}
                                {% set _ = nsMetaVariables.testsEnabledDiff.append({
                                    "Column Name": col.name,
                                    "is": dTests,
                                    "was": cTests
                                }) %}
                            {% endif %}
                        {% endfor %}
                    {% endif %}
                {% endfor %}
            {% endif %}

            {% if nsMetaVariables.testsEnabledTest == false %}
                {{ update_metadata("Test Enanbled", nsMetaVariables.testsEnabledDiff, "Test Enanbled") }}
            {% endif %}

            {# =========================================================
            Distinct Toggle comparison
            ========================================================= #}
            {% if currentState.config.selectDistinct != desiredState.config.selectDistinct %}
                {% set nsMetaVariables.distinctTest = false %}
                {% set _ = nsMetaVariables.distinctDiff.append({
                    "is": desiredState.config.selectDistinct,
                    "was": currentState.config.selectDistinct
                }) %}

                {{ update_metadata("Distinct", nsMetaVariables.distinctDiff, "Distinct") }}

            {% endif %}

            {# =========================================================
            GroupByAll Toggle comparison
            ========================================================= #}
            {% if currentState.config.groupByAll != desiredState.config.groupByAll %}
                {% set nsMetaVariables.groupByAllTest = false %}
                {% set _ = nsMetaVariables.groupByAllDiff.append({
                    "is": desiredState.config.groupByAll,
                    "was": currentState.config.groupByAll
                }) %}
                
                {{ update_metadata("GroupByAll", nsMetaVariables.groupByAllDiff, "GroupByAll") }}

            {% endif %}

            {# =========================================================
            Order By comparison (per column)
            ========================================================= #}
            {% if currentState.config.orderby != desiredState.config.orderby %}

                {% set nsMetaVariables.orderByTest = false %}
                {% set _ = nsMetaVariables.orderByDiff.append({
                     "is": desiredState.config.orderby,
                    "was": currentState.config.orderby
                }) %}
    
            {% elif currentState.config.orderby and desiredState.config.orderby %}

                {% set desiredSortColList = [] %}
                {% set currentSortColList = [] %}

                {# Desired Column sort order #}
                {% for item in desiredState.config.orderbycolumn.get('items', []) %}
                    {% set _ = desiredSortColList.append({
                                "Column Name": item.sortColName.name,
                                "Sort Order": item.sortOrder
                    }) %}
                {% endfor%}
                {# Current Column sort order #}
                {% for item in currentState.config.orderbycolumn.get('items', []) %}
                    {% set _ = currentSortColList.append({
                                "Column Name": item.sortColName.name,
                                "Sort Order": item.sortOrder
                    }) %}
                {% endfor%}

                {% if desiredSortColList != currentSortColList %}
                    {% set nsMetaVariables.orderByTest = false %}
                    {% set _ = nsMetaVariables.orderByDiff.append({
                        "is": desiredSortColList,
                        "was": currentSortColList
                    }) %}
                {% endif %}
             {% endif %}

            {% if nsMetaVariables.orderByTest == false %}
                {{ update_metadata("Order By", nsMetaVariables.orderByDiff, "Order By") }}
            {% endif %}

            {# =========================================================
            Handle detected metadata changes and update
            ========================================================= #}
            {% if nsMetaVariables.joinTest == false
            or sourcesTest == false
            or nsMetaVariables.transformTest == false
            or nsMetaVariables.sourceLinkTest == false
            or nsMetaVariables.businessKeyTest == false
            or nsMetaVariables.insertStrategyTest == false
            or nsMetaVariables.truncateBeforeTest == false
            or nsMetaVariables.testsEnabledTest == false
            or nsMetaVariables.distinctTest == false
            or nsMetaVariables.groupByAllTest == false
            or nsMetaVariables.orderByTest == false
            %}
                {% set nsMetaVariables.metaDataChanged = true %}

                {{ stage(nsMetaVariables.metadataUpdate) }}
                -- Metadata changes detected
                /* {{ nsMetaVariables.metaDataChanges }} */
                select 1=0
            {% endif %}
        
            {% set ns = namespace( storageLocationTest= true,descolchanges = 0, tableDescTest = true, othercolchanges = 0,clusterTest = false,colchanges=0) %}

            {# Node #}
           {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
           {% set nodeMaterializationType = currentState.node.materializationType == desiredState.node.materializationType %} 

            {#Target location Test  #}
            {%if currentState.storageLocations|length == 0%}          
              {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | string %}
              {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | string %}
               {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
               
            {%else %}   
            {# Current target node mappings #}
            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | first %}
            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | first %}
            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}  
			{% endif %}		 
        
            {# Desired target node mappings #}
            {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='database') | first %}
            {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='schema') | first %}
            {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}           
            
             {% if currentDatabaseSchema != desiredDatabaseSchema %}
                {% set ns.storageLocationTest = false %}
             {% endif %}

             {# Clustering Test #}
            {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
            {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
            {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
            {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

            {% if 
                clusterKeyTest == false or
                clusterKeyExpressionsTest == false or
                clusterKeyConfigTest == false or
                clusterKeyConfigExpressionsTest == false %}

                {% set clusterTest = false %}
            {% else %}
                {% set clusterTest = true %}
            {% endif %}

            {# Change table description #}
            {% if (currentState.node.description != desiredState.node.description) %}
                {% set ns.tableDescTest = false %}
            {% endif %}

		   {#Add columns#}
            {% for addDesCol in desiredState.columns %}
                {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
                {% set ns.colchanges = ns.colchanges + 1 %}
                {% endif %}
            {% endfor %}
			
			
			{# Rename Columns #}
            {% for renameCurCol in currentState.columns %}
                {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                    {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                    {% if renameCurCol.name != desiredColumnName %}
                        {% set ns.colchanges = ns.colchanges + 1 %}
                    {% endif %}
                {% endif %}
            {% endfor %}

             
			{# Drop Columns #}
            {% set nsVariables = namespace(colchanges=0) %}
            {% for dropCurCol in currentState.columns %}
                {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                  {% set ns.colchanges = ns.colchanges + 1 %}
                {% endif %}
            {% endfor %}
	
            {#Column level changes test#}
			{% for alterCurCol in currentState.columns %}        
                {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                     {% set currentColumnName = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                    {% set currentDescription = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}
                    {% set currentDatatype = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                    {% set currentNullable = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                    {% set currentDefaultValue = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                    
                    {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                    {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}
                    {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                    {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                    {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                        

                   {% set datatypeTest = currentDatatype == desiredDatatype %}
                   {% set nullableTest = currentNullable == desiredNullable %}
                   {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                   {% set descriptionTest = currentDescription == desiredDescription %}
                   {% set columnnameTest = currentColumnName == desiredColumnName %}

                    {% if (descriptionTest == false) %}
                        {% set ns.descolchanges = ns.descolchanges + 1 %}
                    {%endif%} 														
                    {%if (datatypeTest == false or nullableTest == false or defaultValueTest == false or columnnameTest == false )%} 
                       {% set ns.othercolchanges = ns.othercolchanges + 1 %}                                      
                     {%endif%} 																										
                {%endif%}    
            {% endfor %}
    
          {#Config level changes #}
		  
		   {%set dretentiontest = currentState.config.datretention == desiredState.config.datretention%}
		   {%set mretentiontest = currentState.config.maxdataretention == desiredState.config.maxdataretention%}
		   {%set chngtracktst = currentState.config.changetracking == desiredState.config.changetracking %}
		   {%set schematst    = currentState.config.eschemaevol == desiredState.config.eschemaevol %}
		   
		   {#Constraint test #}
		   
		   {%set inconsttst   = currentState.config.inlineconst == desiredState.config.inlineconst%}
		   {%set consttst     = currentState.config.constraintsspec  ==  desiredState.config.constraintsspec%}                                                                          
           {%set outconsttst   = currentState.config.outlineconst == desiredState.config.outlineconst%}
		   
	
	       {#primary key test#}
		   {%set primarykeytst = currentState.config.primary == desiredState.config.primary%}
		   {%set pkeynametst = currentState.config.primarykeyname == desiredState.config.primarykeyname%}
		   {%set primcoltst = currentState.config.primarykeycon == desiredState.config.primarykeycon%}
		   
            {% if 
                primarykeytst == false or
                pkeynametst == false or
                primcoltst == false 
               %}

                {% set primTest = false %}
             {% else %}
                {% set primTest = true %}
              {% endif %}

           
              {#foreign key test #}
			{%set foreigntst = currentState.config.foreignk == desiredState.config.foreignk%}
		    {%set foreignkeytst = currentState.config.foreignkeycon == desiredState.config.foreignkeycon%}
		   
			
			{% if 
                foreigntst == false or
                foreignkeytst == false %}

                {% set foreignTest = false %}
            {% else %}
                {% set foreignTest = true %}
            {% endif %}

            {% if 
            ns.othercolchanges > 0 or
			ns.descolchanges > 0 or
            ns.colchanges > 0 or
			nodeMaterializationType == false or
            primTest == false or 
            foreignTest == false or 
            ns.tableDescTest == false or 
            clusterTest == false or 
			dretentiontest == false or
            mretentiontest == false or
            chngtracktst == false or
            schematst == false or
            inconsttst == false or
            consttst == false or
            outconsttst == false %}    

            {% set createTest = true %}
          {% else %}
            {% set createTest = false %}
         {% endif %} 

         {%if createTest == false and (ns.storageLocationTest == false or currentState.node.name != desiredState.node.name)  %}    
           {%set altertest = true %}		   
	     {%endif%}
         
        {%if currentState.node.materializationType != desiredState.node.materializationType  %}

                     {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}

                      DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}					 
        {%endif%}

    {%endif%}

    {%if currentState == undefined  or createTest == true%}

      {% set ns = namespace(column_constraints=[],constraint='',flag=false,primarykeyValues='',foreignkeyValues='',foreignk='') %} {# Initialize an empty list in the namespace #}

     {# Inline constraints #}
      {%if desiredState.config.inlineconst == true%}

      {% for item in desiredState.config.constraintsspec.get('items') %}
        {% set column_name = item.columnname.name %}
        {% set constraint_spec = item.constspec %}

       {# Create a temporary dictionary for the current item #}
       {% set col_dict = {'name': column_name, 'constraint': constraint_spec} %}

       {# Append the dictionary to the list in the namespace #}
       {% set ns.column_constraints = ns.column_constraints + [col_dict] %}
      {% endfor %}
      {%endif%}
 
     {# Out of line constraints#}
      {# Primary key clause#}

      {%if desiredState.config.primary == true and desiredState.config.outlineconst == true%}

       {% set column = desiredState.config.primarykeycon.get('items') | map(attribute='primarykey.name')| list%}
	 
	      {% for r in column %}
			   {% set ns.primarykeyValues = ns.primarykeyValues +'"'+r+'"' %}
         {%- if not loop.last -%} {% set ns.primarykeyValues = ns.primarykeyValues +','%} {% endif %}
        {% endfor %}
       
         {% set ns.primarykeyValues = 'CONSTRAINT ' + desiredState.config.primarykeyname + ' PRIMARY KEY ('+ns.primarykeyValues +')' %}

     {%endif%}

      {#Foreign key clause#}

      {%if desiredState.config.foreignk == true%}
      {% set fname,foreigncolumns,parenttable = desiredState.config.foreignkeycon.get('items') | map(attribute='foreignkeyname')| list,desiredState.config.foreignkeycon.get('items') | map(attribute='foreignkeycol')| list,desiredState.config.foreignkeycon.get('items') | map(attribute='parentabname')| list%}

	      {% for r in fname %}
			   
                {% set ns.foreignkeyValues = ns.foreignkeyValues +'CONSTRAINT ' + r + ' FOREIGN KEY ('+ foreigncolumns[loop.index0] +')' + ' REFERENCES '+ parenttable[loop.index0] %}
         {%- if not loop.last -%} {% set ns.foreignkeyValues = ns.foreignkeyValues + ' , '%} {% endif %}
        {% endfor %}              
     {%endif%}

      {# Figure out cluster key #}
        {% set nsVariables = namespace(finalClusterKey="") %}
        {% if desiredState.config.clusterKey == true %}
            {% if desiredState.config.clusterKeyExpressions == true %}
                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% if expression[loop.index0] == "" %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                    {% else %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                    {% endif %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% else %}

                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% endif %}
        {% endif %}

        {# CreateSQL for Table #}
        
        {{ stage('Create/Alter  ' + desiredState.node.materializationType, true, "sql", "create") }}

	  CREATE OR ALTER {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
	 (
        
		{% for col in desiredState.columns %}
    
             {%set ns.constraint = ''%}
             {%set ns.flag= false%}
            {# Check if col.name matches any name in column_constraints #}
         {% for item in ns.column_constraints %}
            {% if item.name == col.name and ns.flag== false %}
              {% set ns.constraint = item.constraint %}
               {% set ns.flag = true %}  {# Stop the inner loop if match is found #}
            {% endif %}
         {% endfor %}
          
          {# Print with or without constraint #}
            "{{ col.name }}" {{ col.dataType }} 
            {%- if ns.constraint %} {{ ns.constraint }}{% endif %}
            {%- if not col.nullable %} NOT NULL {% endif %}
            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
           {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            {%- if not loop.last -%}, {% endif %}
		{% endfor %}
        {% if desiredState.config.primary == true and desiredState.config.outlineconst == true%} ,{{ns.primarykeyValues}}{%if desiredState.config.foreignk == true and desiredState.config.outlineconst == true-%},{%endif-%}{%endif%}
         {%if desiredState.config.foreignk == true and desiredState.config.outlineconst == true %}{% if desiredState.config.primary == false%},{%endif%}{{ns.foreignkeyValues}}{%endif%}
	   )

	    {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}
	    {{nsVariables.finalClusterKey}}
	    {%if desiredState.config.datretention != "" %}DATA_RETENTION_TIME_IN_DAYS = {{desiredState.config.datretention}}{%endif%}
        {%if desiredState.config.maxdataretention != "" %}MAX_DATA_EXTENSION_TIME_IN_DAYS = {{desiredState.config.maxdataretention}}{%endif%}
        {%if desiredState.config.eschemaevol == true %}ENABLE_SCHEMA_EVOLUTION = {{desiredState.config.eschemaevol}}{%endif%}
        {%if desiredState.config.changetracking == true %}CHANGE_TRACKING = {{desiredState.config.changetracking}}{%endif%}
        {%if desiredState.config.defaultcoallation != "" %}DEFAULT_DDL_COLLATION = {{desiredState.config.defaultcoallation}}{%endif%}

        {# Metadata changes detected #}
        {% set nsMetaVariables.metaDataChanged = true %}

    {%endif%}

    {%if altertest == true %}
         
       {{ stage('Rename and / or Move Table') }}
                {% set srcSchName = currentState.node.location.name %}
                {% set cdb = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
                {% set csch = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

                ALTER TABLE  "{{cdb}}"."{{csch}}"."{{currentState.node.name}}"
                RENAME TO   {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}

                {# Metadata changes detected #}
                {% set nsMetaVariables.metaDataChanged = true %}

    {%endif%}

    {# =========================================================
    Handle undetected metadata changes and Default Update
    ========================================================= #}
    {% if currentState != desiredState and nsMetaVariables.metaDataChanged == false %}
        {{ stage('Metadata Update-Default') }}
        select 1=0
    {% endif %}

{%endif%}