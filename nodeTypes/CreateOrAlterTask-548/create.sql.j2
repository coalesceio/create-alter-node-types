{#
    Copyright (c) 2025 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalesce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Create Or Alter Task == #}
{# == Node Type Description    : This node creates or alters a table and a task to insert data into the table and schedules the task == #}

{# == Determine schedulingMode == #} 
{% if desiredState != undefined and desiredState.config.schedulingMode != '' %} 
    {% set schedulingMode = desiredState.config.schedulingMode %} 
{% else %} 
    {% set schedulingMode = 'Warehouse Task' %} 
{% endif %}

{# Parameter Check for Deployment #}
{% if desiredState and currentState != desiredState and desiredState.config.schedulingMode == 'Warehouse Task' %}
    {% if desiredState.parameters == {} or 'targetTaskWarehouse' not in  desiredState.parameters or desiredState.parameters.targetTaskWarehouse == ''%}
        {{stage('WARNING')}}
        /* Add parameter targetTaskWarehouse in workspace settings and deployment environment for successful execution of node.
          The default value for the parameter is 'DEV ENVIRONMENT'.
          For more information, refer to the documentation. */
    {%endif%}
{%endif%}

{% if desiredState == undefined %}

    {# Table or View Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
    
       {{ stage('Drop Table' ) }}
       DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

{% elif currentState == undefined or (currentState != undefined and desiredState != currentState) %}
    {% if currentState != undefined%} 
        {% set ns = namespace( storageLocationTest = true, descolchanges = 0, othercolchanges = 0, clusterTest = false, colchanges = 0) %}
        {% set nodeNameTest = currentState.node.name == desiredState.node.name %}
        {% set joinTest = currentState.join == desiredState.join %}
        {# Test to see if the transform in a column has changed #}
        {% set desiredTransformArray = desiredState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}
        {# Current Namespace Variables Transform #}
        {% set currentTransformArray = currentState.sources | map(attribute='columns') | first | map(attribute='transform') | list -%}
        {% set columnsTransformTest = currentTransformArray == desiredTransformArray %}

        {#Target location Test  #}
        {% if currentState.storageLocations|length == 0%}

            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | string %}
            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | string %}
            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}
        
        {%else %}

            {# Current target node mappings #}
            {% set currentDatabase = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='database') | first %}
            {% set currentSchema = currentState.storageLocations | selectattr('name', 'equalto', currentState.node.location.name) | map(attribute='schema') | first %}
            {% set currentDatabaseSchema = currentDatabase + '.' + currentSchema %}

        {% endif %}		 
    
        {# Desired target node mappings #}
        {% set desiredDatabase = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='database') | first %}
        {% set desiredSchema = desiredState.storageLocations | selectattr('name', 'equalto', desiredState.node.location.name) | map(attribute='schema') | first %}
        {% set desiredDatabaseSchema = desiredDatabase + '.' + desiredSchema %}           
        
        {% if currentDatabaseSchema != desiredDatabaseSchema %}
            {% set ns.storageLocationTest = false %}
        {% endif %}

            {# Clustering Test #}
        {% set clusterKeyTest = currentState.config.clusterKey == desiredState.config.clusterKey %}
        {% set clusterKeyExpressionsTest = currentState.config.clusterKeyExpressions == desiredState.config.clusterKeyExpressions %}
        {% set clusterKeyConfigTest = currentState.config.clusterKeyConfig == desiredState.config.clusterKeyConfig %}
        {% set clusterKeyConfigExpressionsTest = currentState.config.clusterKeyConfigExpressions == desiredState.config.clusterKeyConfigExpressions %}

        {% if 
            clusterKeyTest == false or
            clusterKeyExpressionsTest == false or
            clusterKeyConfigTest == false or
            clusterKeyConfigExpressionsTest == false %}

            {% set clusterTest = false %}
        {% else %}
            {% set clusterTest = true %}
        {% endif %}

        {#Add columns#}
        {% for addDesCol in desiredState.columns %}
            {% if addDesCol.id not in currentState.columns | map(attribute="id") %}
            {% set ns.colchanges = ns.colchanges + 1 %}
            {% endif %}
        {% endfor %}
        
        {# Rename Columns #}
        {% for renameCurCol in currentState.columns %}
            {% if renameCurCol.id in desiredState.columns | map(attribute="id") %}
                {% set desiredColumnName = desiredState.columns | selectattr('id', 'equalto', renameCurCol.id) | map(attribute='name') | first %}
                {% if renameCurCol.name != desiredColumnName %}
                    {% set ns.colchanges = ns.colchanges + 1 %}
                {% endif %}
            {% endif %}
        {% endfor %}

        {# Drop Columns #}
        {% set nsVariables = namespace(colchanges=0) %}
        {% for dropCurCol in currentState.columns %}
            {% if dropCurCol.id not in desiredState.columns | map(attribute="id") %}
                {% set ns.colchanges = ns.colchanges + 1 %}
            {% endif %}
        {% endfor %}

        {#Column level changes test#}
        {% for alterCurCol in currentState.columns %}        
            {% if alterCurCol.id in desiredState.columns | map(attribute="id") %}
                {% set currentColumnName = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                {% set currentDescription = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}
                {% set currentDatatype = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                {% set currentNullable = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                {% set currentDefaultValue = currentState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}
                
                {% set desiredColumnName = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='name') | first %}
                {% set desiredDescription = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='description') | first %}
                {% set desiredDatatype = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='dataType') | first %}
                {% set desiredNullable = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='nullable') | first %}
                {% set desiredDefaultValue = desiredState.columns | selectattr('id', "equalto", alterCurCol.id) | map(attribute='defaultValue') | first %}

                {% set datatypeTest = currentDatatype == desiredDatatype %}
                {% set nullableTest = currentNullable == desiredNullable %}
                {% set defaultValueTest = currentDefaultValue == desiredDefaultValue %}
                {% set descriptionTest = currentDescription == desiredDescription %}
                {% set columnnameTest = currentColumnName == desiredColumnName %}

                {% if (descriptionTest == false) %}
                    {% set ns.descolchanges = ns.descolchanges + 1 %}
                {%endif%}
                                                
                {% if (datatypeTest == false or nullableTest == false or defaultValueTest == false or columnnameTest == false )%} 
                    {% set ns.othercolchanges = ns.othercolchanges + 1 %}                                      
                {%endif%} 																										
            {%endif%}    
        {% endfor %}

        {# Config level changes #}
        {% set dretentiontest = currentState.config.datretention == desiredState.config.datretention%}
        {% set mretentiontest = currentState.config.maxdataretention == desiredState.config.maxdataretention%}
        {% set chngtracktst = currentState.config.changetracking == desiredState.config.changetracking %}
        {% set schematst = currentState.config.eschemaevol == desiredState.config.eschemaevol %}
        
        {# Constraint test #}
        {% set inconsttst = currentState.config.inlineconst == desiredState.config.inlineconst%}
        {% set consttst = currentState.config.constraintsspec  ==  desiredState.config.constraintsspec %}
        {% set outconsttst = currentState.config.outlineconst == desiredState.config.outlineconst %}

        {# primary key test #}
        {% set primarykeytst = currentState.config.primary == desiredState.config.primary%}
        {% set pkeynametst = currentState.config.primarykeyname == desiredState.config.primarykeyname %}
        {% set primcoltst = currentState.config.primarykeycon == desiredState.config.primarykeycon %}
        
        {% if primarykeytst == false or pkeynametst == false or primcoltst == false %}
            {% set primTest = false %}
        {% else %}
            {% set primTest = true %}
        {% endif %}

        {#foreign key test #}
        {% set foreigntst = currentState.config.foreignk == desiredState.config.foreignk %}
        {% set foreignkeytst = currentState.config.foreignkeycon == desiredState.config.foreignkeycon %}
        
        {% if foreigntst == false or foreignkeytst == false %}
            {% set foreignTest = false %}
        {% else %}
            {% set foreignTest = true %}
        {% endif %}

        {% if 
            ns.othercolchanges > 0 or
            ns.descolchanges > 0 or
            ns.colchanges > 0 or
            joinTest == false or
            columnsTransformTest == false or
            primTest == false or 
            foreignTest == false or 
            clusterTest == false or 
            dretentiontest == false or
            mretentiontest == false or
            chngtracktst == false or
            schematst == false or
            inconsttst == false or
            consttst == false or
            outconsttst == false %}    

            {% set createTest = true %}
        {% else %}
            {% set createTest = false %}
        {% endif %}

        {% if createTest == false and (ns.storageLocationTest == false or currentState.node.name != desiredState.node.name)  %}    
            {% set altertest = true %}		   
        {%endif%}
    {%endif%}

    {% if currentState == undefined or createTest %}

        {# Initialize an empty list in the namespace #}
        {% set ns = namespace(column_constraints = [], constraint = '', flag = false, primarykeyValues = '', foreignkeyValues = '', foreignk = '') %} 

        {# Inline constraints #}
        {% if desiredState.config.inlineconst %}
            {% for item in desiredState.config.constraintsspec.get('items') %}
                {% set column_name = item.columnname.name %}
                {% set constraint_spec = item.constspec %}

                {# Create a temporary dictionary for the current item #}
                {% set col_dict = {'name': column_name, 'constraint': constraint_spec} %}

                {# Append the dictionary to the list in the namespace #}
                {% set ns.column_constraints = ns.column_constraints + [col_dict] %}
            {% endfor %}
        {%endif%}
 
        {# Out of line constraints#}
        {# Primary key clause#}

        {% if desiredState.config.primary and desiredState.config.outlineconst %}

            {% set column = desiredState.config.primarykeycon.get('items') | map(attribute='primarykey.name')| list%}
	 
	        {% for r in column %}
			    {% set ns.primarykeyValues = ns.primarykeyValues +'"'+r+'"' %}

                {%- if not loop.last -%}
                    {% set ns.primarykeyValues = ns.primarykeyValues +',' %}
                {% endif %}

            {% endfor %}
       
            {% set ns.primarykeyValues = 'CONSTRAINT ' + desiredState.config.primarykeyname + ' PRIMARY KEY ('+ns.primarykeyValues +')' %}
        {%endif%}

        {#Foreign key clause#}
        {% if desiredState.config.foreignk %}
            {% set fname,foreigncolumns,parenttable = desiredState.config.foreignkeycon.get('items') | map(attribute='foreignkeyname')| list,desiredState.config.foreignkeycon.get('items') | map(attribute='foreignkeycol')| list,desiredState.config.foreignkeycon.get('items') | map(attribute='parentabname')| list%}

	        {% for r in fname %}
                {% set ns.foreignkeyValues = ns.foreignkeyValues +'CONSTRAINT ' + r + ' FOREIGN KEY ('+ foreigncolumns[loop.index0] +')' + ' REFERENCES '+ parenttable[loop.index0] %}

                {%- if not loop.last -%}
                    {% set ns.foreignkeyValues = ns.foreignkeyValues + ' , ' %}
                {% endif %}
            {% endfor %}              
        {%endif%}

        {# Figure out cluster key #}
        {% set nsVariables = namespace(finalClusterKey="") %}
        {% if desiredState.config.clusterKey %}
            {% if desiredState.config.clusterKeyExpressions %}

                {% set column, expression = desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='columnNameExpressions.name') | list, desiredState.config.clusterKeyConfigExpressions.get('items') | map(attribute='sqlExpression') | list %}

                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% if expression[loop.index0] == "" %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                    {% else %}
                        {% set nsVariables.clusterValues = nsVariables.clusterValues + [expression[loop.index0]] %}
                    {% endif %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% else %}

                {% set column = desiredState.config.clusterKeyConfig.get('items') | map(attribute='columnName.name') | list %}
                {%- set nsVariables = namespace(clusterValues=[]) %}

                {% for r in column %}
                    {% set nsVariables.clusterValues = nsVariables.clusterValues + ['"'+r+'"'] %}
                {% endfor %}

                {% set nsVariables.finalClusterKey = 'CLUSTER BY (' + nsVariables.clusterValues | join(',') + ')' %}

            {% endif %}
        {% endif %}

        {# CreateSQL for Table #}
        {{ stage('Create/Alter Table', true, "sql", "create") }}

	    CREATE OR ALTER TABLE {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
	    (
        {% for col in desiredState.columns %}
    
            {% set ns.constraint = ''%}
            {% set ns.flag= false%}

            {# Check if col.name matches any name in column_constraints #}
            {% for item in ns.column_constraints %}
                {% if item.name == col.name and ns.flag == false %}
                    {% set ns.constraint = item.constraint %}
                    {# Stop the inner loop if match is found #}
                    {% set ns.flag = true %}
                {% endif %}
            {% endfor %}
          
            {# Print with or without constraint #}
            "{{ col.name }}" {{ col.dataType }}

            {%- if ns.constraint %}
                {{ ns.constraint }}
            {% endif %}

            {%- if not col.nullable %}
                NOT NULL
            {% endif %}

            {%- if col.defaultValue | length > 0 %}
                DEFAULT {{ col.defaultValue }}
            {% endif %}

            {%- if col.description | length > 0 %}
                COMMENT '{{ col.description | escape }}'
            {% endif %}

            {%- if not loop.last -%}
                ,
            {% endif %}
	    {% endfor %}

        {% if desiredState.config.primary and desiredState.config.outlineconst %}
            ,{{ns.primarykeyValues}}
            {% if desiredState.config.foreignk and desiredState.config.outlineconst -%}
                ,
            {%endif -%}
        {%endif%}

        {% if desiredState.config.foreignk and desiredState.config.outlineconst %}
            {% if desiredState.config.primary == false%}
                ,
            {%endif%}
            {{ns.foreignkeyValues}}
        {%endif%}
        )

	    {%- if desiredState.node.description | length > 0 %}
            COMMENT = '{{ desiredState.node.description | escape }}'
        {% endif %}
	    
        {{nsVariables.finalClusterKey}}
	    
        {% if desiredState.config.datretention != "" %}
            DATA_RETENTION_TIME_IN_DAYS = {{desiredState.config.datretention}}
        {%endif%}
        
        {% if desiredState.config.maxdataretention != "" %}
            MAX_DATA_EXTENSION_TIME_IN_DAYS = {{desiredState.config.maxdataretention}}
        {%endif%}
        
        {% if desiredState.config.eschemaevol %}
            ENABLE_SCHEMA_EVOLUTION = {{desiredState.config.eschemaevol}}
        {%endif%}

        {% if desiredState.config.changetracking %}
            CHANGE_TRACKING = {{desiredState.config.changetracking}}
        {%endif%}

        {% if desiredState.config.defaultcoallation != "" %}
            DEFAULT_DDL_COLLATION = {{desiredState.config.defaultcoallation}}
        {%endif%}

    {%endif%}

    {% if altertest %}
         
        {{ stage('Rename and / or Move Table', true, "sql", "create") }}
        {% set srcSchName = currentState.node.location.name %}
        {% set cdb = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='database') | first %}
        {% set csch = currentState.storageLocations | selectattr('name', 'equalto', srcSchName) | map(attribute='schema') | first %}

        ALTER TABLE  "{{cdb}}"."{{csch}}"."{{currentState.node.name}}"
        RENAME TO {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
    {%endif%}

{%endif%}

{# == Determine schedulePeriodOption == #} 
{% if desiredState != undefined and desiredState.config.schedulePeriodOption != '' %} 
    {% set schedulePeriodOption = desiredState.config.schedulePeriodOption %} 
{% else %} 
    {% set schedulePeriodOption = 'Predecessor' %} 
{% endif %}

{# == Determine serverlessSize == #} 
{% if desiredState != undefined and desiredState.config.serverlessSize != '' %} 
    {% set serverlessSize = desiredState.config.serverlessSize %} 
{% else %} 
    {% set serverlessSize = 'MEDIUM' %} 
{% endif %}

{# Create Or Alter Task  #}
{% if desiredState != undefined and desiredState != currentState %}

    {# == Determine Insert Strategy == #} 
    {% if desiredState.node.isMultisource and desiredState.config.insertStrategy != '' %} 
        {% set insertStrategy = desiredState.config.insertStrategy %} 
    {% else %}
        {% set insertStrategy = 'UNION' %}
    {% endif %} 

    {# Target Table Info #}
    {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
    {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}

    {% if desiredState.config.devMode == false %}
        {%- if schedulePeriodOption == 'Predecessor' -%} 
            {% set fullyQualifiedRootTaskName = ref_no_link(desiredState.node.location.name, desiredState.config.rootTask) %}

            {{ stage('Suspend Root Task', true, "sql", "create") }}
            ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND

        {%- endif -%}

        {%-if currentState != undefined and currentState.config.schedulePeriodOption != schedulePeriodOption -%}            
         {%- if currentState.config.schedulePeriodOption == 'Predecessor' -%}
            {% set fullyQualifiedRootTaskName = ref_no_link(currentState.node.location.name, currentState.config.rootTask) %}

            {{ stage('Suspend Root Task', true, "sql", "create") }}
            ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND

          {%- endif -%}
        {%-endif -%}

        {# Set Namespace Variables #}
        {% set nsVariables = namespace(taskWhenRun="") %}
        {% set nsVariables = namespace(poll="WHEN ") %}
        {# Task Info - Use ref() #}
        {% set taskName = desiredState.node.name + '_TASK' %}
        {% set fullyQualifiedTaskName = ref_no_link(desiredState.node.location.name, taskName) %}

        {# Task Type #}
        {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
            {# Can be updated during deployment via a parameter to account for different warehouse names in different deployments #}
            {% if 'targetTaskWarehouse'  in  desiredState.parameters %}
                {% if desiredState.parameters.targetTaskWarehouse == 'DEV ENVIRONMENT' %}
                    {% set taskType = 'WAREHOUSE = ' + desiredState.config.whName %}
                {% else %}
                    {% set taskType = 'WAREHOUSE = ' + desiredState.parameters.targetTaskWarehouse %}
                {% endif %}
            {% endif %}
        {%- else -%}
            {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + serverlessSize -%}
        {%- endif -%}
           
        {# Schedule Type #}
        {%- if schedulePeriodOption == 'Minutes' -%} 
            {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
        {% elif schedulePeriodOption == 'CRON' %}
            {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON +"'" %}
        {%- else -%}
            {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
            {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

            {%- for p in predecessorTasks -%}
                {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + '"' + p + '"' -%}
                {%- if not loop.last -%} 
                    {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                {%- endif %}
            {% endfor %}    
        {%- endif -%}

        {# When Stream has data logic #}
        {# Source Stream Location and Name #}
        {% if desiredState.config.flagSrcStream %}
            {% for source in desiredState.sources %}
                {% for dep in source.dependencies %}
                    {% if (dep.node.materializationType == 'stream') %}
                        {% set streamStorageLocation = dep.node.location.name %}
                        {% set streamSourceDatabase = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='database') | first %}
                        {% set streamSourceSchema = desiredState.storageLocations | selectattr('name', 'equalto', streamStorageLocation) | map(attribute='schema') | first %}
                        {% set streamSourceName = dep.node.name %}

                        {%- if nsVariables.poll == 'WHEN ' -%}
                            {% set nsVariables.poll = nsVariables.poll + 'SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                        {% else %}
                            {% set nsVariables.poll = nsVariables.poll + desiredState.config.multiStreamBehavior + ' SYSTEM$STREAM_HAS_DATA(\'"' + streamSourceDatabase + '"."'  + streamSourceSchema + '"."' + streamSourceName + '"\')'  %}
                        {%- endif -%}
                    {%- endif -%}
                {% endfor %}
            {% endfor %}
        {% endif -%}

        {# To mimic truncate behavior #}
        {% if desiredState.config.truncateBefore %}
            {% set truncateBehavior = 'INSERT OVERWRITE' %}
        {% else %}
            {% set truncateBehavior = 'INSERT' %}
        {% endif -%}

        {# Suspension of existing tasks before create or alter task #}
        {% if altertest %}
            {% set taskName = currentState.node.name + '_TASK' %}
            {% set fullyQualifiedOldTaskName = ref_no_link(currentState.node.location.name, taskName) %}
            {# SUSPEND the old task if exists, before create/alter new task #}
            {{ stage('Drop Existing Task') }}
            {# ALTER TASK IF EXISTS {{ fullyQualifiedOldTaskName }} SUSPEND #}
            DROP TASK IF EXISTS {{ fullyQualifiedOldTaskName }}
        {% else -%}
            {% if currentState != undefined and schedulePeriodOption != 'Predecessor' %}
                {# SUSPEND the task if exists, before create/alter task #}
                {{ stage('Suspend Task', true, "sql", "create") }}
                ALTER TASK IF EXISTS {{ fullyQualifiedTaskName }} SUSPEND
            {% endif -%}
        {% endif -%}

        {{ stage('Create Or Alter Task', true, "sql", "create") }}
        CREATE OR ALTER TASK 
            {{ fullyQualifiedTaskName }} 
            {{ taskType}}
            {% if desiredState.config.timeOut != '' %}
                USER_TASK_TIMEOUT_MS = {{ desiredState.config.timeOut }}
            {% endif %}
            {% if desiredState.node.description != '' %}
                COMMENT = '{{ desiredState.node.description }}'
            {% endif %}
            {{ nsVariables.taskWhenRun }} 
            {% if nsVariables.poll != 'WHEN ' %}
                {{ nsVariables.poll }}
            {% endif %}
        AS 
            {{ truncateBehavior }}
        INTO 
            {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
            (
                {% for col in desiredState.columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%},{% endif %}
                {% endfor %}
            )
        
            {% for source in desiredState.sources %}
                /* Combine Sources if needed */
                {% if loop.first %}
                    SELECT
                        {% if desiredState.config.selectDistinct %}
                            DISTINCT
                        {% endif %}
                        {% for col in desiredState.columns  %}
                            "{{ col.name }}" AS "{{ col.name }}"
                            {% if not loop.last %}
                                ,
                            {% endif %}
                        {% endfor %}
                    FROM
                    (
                {% endif %}
                SELECT
                    {% if desiredState.config.selectDistinct %}
                        DISTINCT
                    {% endif %}
                    {% for col in source.columns if not col.isSurrogateKey %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {% if not loop.last %}
                            ,
                        {% endif %}
                    {% endfor %}
                {{ source.join }}                  
                {% if not loop.last %}
                    {{ insertStrategy }}
                {% endif %}
                {% if loop.last %}
                    )
                {% endif %}
            {% endfor %}
                {% if desiredState.config.groupByAll %}
                    GROUP BY ALL
                {% endif %}
            {{ sortorder_by_colv() }}

        {%- if schedulePeriodOption != 'Predecessor' -%}

            {{ stage('Resume Task', true, "sql", "create") }}
            ALTER TASK IF EXISTS {{ fullyQualifiedTaskName }} RESUME;
        
        {%- endif -%}       
    {%- endif -%}

{# Dropping the task #}
{% elif currentState != undefined and desiredState == undefined %}

    {% if currentState.config.devMode == false %}
		{% set fullyQualifiedRootTaskName = ref_no_link(currentState.node.location.name, currentState.config.rootTask) %}

        {# Task Info #}
        {% set taskName = currentState.node.name + '_TASK' %}
        {% set fullyQualifiedTaskName = ref_no_link(currentState.node.location.name, taskName) %}
        {%- if currentState.config.schedulePeriodOption == 'Predecessor' -%}

            {{ stage('Suspend Root Task') }}
            ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND

            {{ stage('Drop Current Task') }}
            DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 

        {%- else -%}

            {{ stage('Drop Current Task') }}
            DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
        
        {%- endif -%}
    {%- endif -%}
{% endif %}